#app-refresh.app-refresh(style='position: fixed;top: -2.2rem;left: 0;right: 0;z-index: 99999;padding: 0 1rem;font-size: 15px;height: 2.2rem;transition: all 0.3s ease;')
  .app-refresh-wrap(style=' display: flex;color: #fff;height: 100%;align-items: center;justify-content: center;')
    label=_p('sw.update')
    a(href='javascript:void(0)' onclick='location.reload(true)')
      span(style='color: #fff;text-decoration: underline;cursor: pointer;')=_p('sw.check')
script.
    /////////////////////////////// serviceWorker ///////////////////////////////////////////
    function registerServiceWorker(path) {
      if (window.location.hostname != "localhost") {
        "serviceWorker" in navigator && navigator.serviceWorker.register(`${path}?time=${new Date().getTime()}`).then(function (n) {
          if ('serviceWorker' in navigator) {
            if (navigator.serviceWorker.controller) {
              navigator.serviceWorker.addEventListener('controllerchange', function() {
                showNotification()
              })
            }
          }
          n.onupdatefound = function () {
            var e = n.installing;
            e.onstatechange = function () {
              switch (e.state) {
                case "installed":
                  navigator.serviceWorker.controller ?
                    console.log("Updated Service Worker.") :
                    console.log("Service Worker Sucess!");
                  break;
                case "redundant":
                  console.log("The installing service worker became redundant.")
              }
            }
          }
        }).catch(function (e) {
          console.error("Error during service worker registration:", e)
          if (typeof swinstallretry === 'undefined') {
            swinstallretry = 1;
            registerServiceWorker(`/cw.js`)
          }
        });
      }
    }
    registerServiceWorker(`/cw.js`)
    //////////////////////////////////////////////////////////////////////////
    //// unregister serviceWorker
    //if ('serviceWorker' in navigator) {
    //  navigator.serviceWorker.ready.then(registration => {
    //    registration.unregister();
    //  });
    //}
    //////////////////////////////////////////////////////////////////////////
